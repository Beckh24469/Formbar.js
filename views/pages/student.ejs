<!DOCTYPE html>
<html lang="en">
<%- include('../partials/header_content') %>
	<%- include('../partials/sockets') %>
		<%- include('../partials/formbar_header') %>

			<body>
				<div id="lessonContent">
					<%if(lesson.content !=undefined){%>
						<h3 id="headerText">
							<%- lesson.date %>
						</h3>
						<% for (let i=0; i < lesson.content.length; i++) { %>
							<u>
								<h2 id="headerText">
									<%-lesson.content[i][0]%>
								</h2>
							</u>
							<% for (let u=1; u < lesson.content[i].length; u++) { %>
								<b id="headerText">
									<%- lesson.content[i][u]%>
								</b><br>
								<% } %>
									<% } %>
										<br>
										<a href="/previousLessons" class="quickButton">Go To A Previous Lesson</a>
										<% } else { %>
											<h1 id="headerText" class="textColorContent">No active lesson</h1>
											<a href="/previousLessons" class="quickButton">Go To A Previous Lesson</a>
											<% } %>

				</div>
				<div id="pollContent">
					<h1 id="noPoll" class="textColorContent">No active poll</h1>
					<div id="poll">
						<u>
							<h2 id="pollPrompt">

							</h2>
						</u>
						<form id="pollForm"></form>
						<br>
						<button onclick="submitPoll()" class="quickButton">Submit</button>
					</div>
				</div>
				<div id="quizContent">
					<form id="quizForm" method="post" action="/student">
					</form>
				</div>
				<%- include('../partials/body_content') %>
			</body>

			<script type="text/javascript">
				//variable creation
				var resTextBox = document.getElementById('resTextBox')
				var pollForm = document.getElementById('pollForm')
				var pollContent = document.getElementById('pollContent')
				var quizContent = document.getElementById('quizContent')
				var lessonContent = document.getElementById('lessonContent')
				var noPoll = document.getElementById('noPoll')
				var pollDiv = document.getElementById('poll')
				let pollPromptDisplay = document.getElementById('pollPrompt')

				var oldLettRes = '<%- myRes %>'
				var oldTextRes = '<%- myTextRes %>'

				let poll = {}
				let mode = ''
				let quiz = {}

				function updatePage() {
					if (mode == 'poll') {
						pollContent.style.display = 'block'
						quizContent.style.display = 'none'
						lessonContent.style.display = 'none'

						if (poll.status) {
							noPoll.style.display = 'none'
							pollDiv.style.display = 'block'

							pollForm.innerHTML = ''

							pollPromptDisplay.innerText = poll.prompt

							// Creates all selectable answers and displays them to the user
							for (let response of Object.values(poll.responses)) {
								pollForm.innerHTML += `
										<label class="form-control" id="pollControl" style="color: ${response.color}; --theme-color: black;">
											<input type="radio" name="poll" id="${response.answer}" value="${response.answer}">
											${response.answer}
										</label>
									`
							}
							pollForm.innerHTML += `
										<label class="form-control" id="pollControl" style="--theme-color: #000000;">
											<input type="radio" name="poll" id="remove" value="remove">
											remove
										</label>
									`
							if (poll.textRes) {
								pollForm.innerHTML += `<br><input type="text" name="resText" id="resTextBox" value="${oldTextRes}">`
							}
						} else {
							noPoll.style.display = 'block'
							pollDiv.style.display = 'none'
						}

						if (oldLettRes) {
							document.getElementById(oldLettRes).checked = true
						}
					} else if (mode == 'quiz') {
						pollContent.style.display = 'none'
						quizContent.style.display = 'block'
						lessonContent.style.display = 'none'
						let correctAnswerIndex = []
						let quizForm = document.getElementById('quizForm')

						for (let i = 0; i < quiz.questions.length; i++) {
							quizForm.innerHTML += `</br><br><b class="textColorContent">${quiz.questions[i][0]}</b>`
							correctAnswerIndex.push(quiz.questions[i][1])
							for (let u = 2; u < quiz.questions[i].length; u++) {
								quizForm.innerHTML += `</br><input type="checkbox" name="question" value="${u - 1}"> ${quiz.questions[i][u]}`
							}
						}
						quizForm.innerHTML += `</br><br><button type="submit" class="quickButton">Submit Answers</button>`
					} else if (mode == 'lesson') {
						pollContent.style.display = 'none'
						quizContent.style.display = 'none'
						lessonContent.style.display = 'block'
					}
				}

				// Submits the users answer to the poll
				// Takes the pollResponses value which defines the number of possible answers
				function submitPoll() {
					var radios = document.getElementsByTagName('input')
					var lettRes = ''
					var textRes = ''
					for (var i = 0; i < radios.length; i++) {

						if (radios[i].type === 'radio' && radios[i].checked) {
							// Defines the letter response of the user
							lettRes = radios[i].value

						}
						if (radios[i].type === 'text') {
							// Defines the text input of the user
							textRes = radios[i].value
						}

					}

					// Sends user input to the server
					socket.emit('pollResp', lettRes, textRes)
					socket.emit('sfxPlay', 'sfx_up01')

					let alertText = ''
					setTimeout(() => {
						if (lettRes)
							alertText += 'Response submitted: ' + lettRes
						else if (oldLettRes)
							alertText += 'Response removed'
						else if (document.getElementById('remove').checked)
							alertText += 'No poll response to remove'
						if (textRes) {
							if (alertText) alertText += '\n'
							alertText += 'Text response submitted: ' + textRes
						} else if (oldTextRes) {
							if (alertText) alertText += '\n'
							alertText += 'Text response removed'
						}
						if (alertText) alert(alertText)

						oldLettRes = lettRes
						oldTextRes = textRes
					}, 100)
				}

				function isObjectEqual(objectA, objectB) {
					for (let property in objectA) {
						switch (typeof (objectA[property])) {
							case 'object':
								if (!isObjectEqual(objectA[property], objectB[property])) {
									return false;
								}
								break;
							case 'function':
								if (typeof (objectB[property]) === 'undefined' ||
									(property !== 'isEqual' && objectA[property].toString() !== objectB[property].toString())) {
									return false;
								}
								break;
							default:
								if (objectA[property] !== objectB[property]) {
									return false;
								}
						}
					}

					for (let property in objectB) {
						if (typeof (objectA[property]) === 'undefined') {
							return false;
						}
					}

					return true;
				}

				socket.emit('pollUpdate')
				socket.on('pollUpdate', (newPoll) => {
					if (isObjectEqual(poll, newPoll)) return

					poll = newPoll
					updatePage()
				})

				socket.emit('modeUpdate')
				socket.on('modeUpdate', (newMode) => {
					if (mode == newMode) return

					mode = newMode
					updatePage()
				})

				socket.emit('quizUpdate')
				socket.on('quizUpdate', (newQuiz) => {
					if (isObjectEqual(quiz, newQuiz)) return

					quiz = newQuiz
					updatePage()
				})
			</script>

</html>